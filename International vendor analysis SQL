
-- Top product categories by sales
SELECT category, SUM(total_amount) as total_sales
FROM Purchases p
JOIN Products pr ON p.product_id = pr.product_id
GROUP BY category
ORDER BY total_sales DESC;

-- Top customers by total purchase amount
SELECT c.customer_id, c.name, SUM(p.total_amount) as total_purchase_amount
FROM Customers c
JOIN Purchases p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.name
ORDER BY total_purchase_amount DESC;

-- Customer segmentation by purchase frequency
SELECT customer_id,
       CASE
           WHEN COUNT(purchase_id) >= 10 THEN 'Frequent Buyer'
           WHEN COUNT(purchase_id) >= 5 THEN 'Regular Buyer'
           ELSE 'Infrequent Buyer'
       END as customer_segment
FROM Purchases
GROUP BY customer_id;

-- Best-selling products
SELECT p.product_id, p.name, SUM(purchase_quantity) as total_sales
FROM Products p
JOIN Purchases pur ON p.product_id = pur.product_id
GROUP BY p.product_id, p.name
ORDER BY total_sales DESC;

-- Monthly sales trends
SELECT DATE_FORMAT(purchase_date, '%Y-%m') as month, SUM(total_amount) as monthly_sales
FROM Purchases
GROUP BY month
ORDER BY month;

-- Customer CLV calculation
SELECT customer_id, SUM(total_amount) as total_purchase_amount
FROM Purchases
GROUP BY customer_id;

-- Identify churned customers (example: no purchase in the last 90 days)
SELECT customer_id
FROM Customers
WHERE customer_id NOT IN (
    SELECT DISTINCT customer_id
    FROM Purchases
    WHERE purchase_date >= DATE_SUB(NOW(), INTERVAL 90 DAY)
);


-- Association rules to find frequently purchased products together
SELECT p1.name as product_1, p2.name as product_2, COUNT(*) as support
FROM Purchases pr1
JOIN Purchases pr2 ON pr1.customer_id = pr2.customer_id AND pr1.purchase_id <> pr2.purchase_id
JOIN Products p1 ON pr1.product_id = p1.product_id
JOIN Products p2 ON pr2.product_id = p2.product_id
GROUP BY product_1, product_2
HAVING support > 10
ORDER BY support DESC;


-- RFM segmentation
WITH RFM AS (
    SELECT customer_id,
        DATEDIFF(NOW(), MAX(purchase_date)) as recency,
        COUNT(DISTINCT purchase_id) as frequency,
        SUM(total_amount) as monetary
    FROM Purchases
    GROUP BY customer_id
)
SELECT customer_id,
    CASE
        WHEN recency < 30 AND frequency >= 5 AND monetary >= 1000 THEN 'High-Value'
        WHEN recency < 90 AND frequency >= 3 AND monetary >= 500 THEN 'Mid-Value'
        ELSE 'Low-Value'
    END as rfm_segment
FROM RFM;

-- Calculate 3-month moving average of monthly sales
WITH MonthlySales AS (
    SELECT DATE_FORMAT(purchase_date, '%Y-%m') as month, SUM(total_amount) as monthly_sales
    FROM Purchases
    GROUP BY month
)
SELECT month, monthly_sales,
    AVG(monthly_sales) OVER (
        ORDER BY month
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) as moving_avg_3_months
FROM MonthlySales;


-- Cohort analysis based on the first purchase month
WITH Cohort AS (
    SELECT c.customer_id, DATE_FORMAT(MIN(p.purchase_date), '%Y-%m') as cohort_month
    FROM Customers c
    JOIN Purchases p ON c.customer_id = p.customer_id
    GROUP BY c.customer_id
)
SELECT cohort_month, DATE_FORMAT(p.purchase_date, '%Y-%m') as purchase_month, COUNT(DISTINCT p.customer_id) as customers
FROM Purchases p
JOIN Cohort c ON p.customer_id = c.customer_id
GROUP BY cohort_month, purchase_month
ORDER BY cohort_month, purchase_month;


-- Percentage of total sales by product category
WITH CategorySales AS (
    SELECT category, SUM(total_amount) as category_sales
    FROM Purchases p
    JOIN Products pr ON p.product_id = pr.product_id
    GROUP BY category
)
SELECT category, category_sales,
       (category_sales / SUM(category_sales) OVER ()) * 100 as percentage_of_total_sales
FROM CategorySales;


-- Cumulative sales by customer
WITH CustomerCumulativeSales AS (
    SELECT customer_id, purchase_date, SUM(total_amount) OVER (PARTITION BY customer_id ORDER BY purchase_date) as cumulative_sales
    FROM Purchases
)
SELECT customer_id, purchase_date, cumulative_sales
FROM CustomerCumulativeSales;


-- Rank customers by total purchase amount
SELECT customer_id, SUM(total_amount) as total_purchase_amount,
    RANK() OVER (ORDER BY SUM(total_amount) DESC) as customer_rank
FROM Purchases
GROUP BY customer_id;


-- Calculate the difference in purchase amount for each customer
WITH CustomerPurchaseDiff AS (
    SELECT customer_id, purchase_date, total_amount,
        LAG(total_amount) OVER (PARTITION BY customer_id ORDER BY purchase_date) as previous_purchase_amount
    FROM Purchases
)
SELECT customer_id, purchase_date, total_amount,
    total_amount - previous_purchase_amount as purchase_amount_diff
FROM CustomerPurchaseDiff;


-- Top-selling product by category
WITH RankedProducts AS (
    SELECT category, name, total_amount,
        RANK() OVER (PARTITION BY category ORDER BY total_amount DESC) as product_rank
    FROM Products p
    JOIN Purchases pur ON p.product_id = pur.product_id
)
SELECT category, name as top_selling_product
FROM RankedProducts
WHERE product_rank = 1;
